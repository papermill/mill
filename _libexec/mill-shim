#!/bin/sh

# Usage: mill shim <nasty hack>
# Summary: Glue code, (platform) abstractions, nasty hacks.
# Help: Not really a command, but a collection of glue code,
# (platform) abstractions and/or nasty hacks 'mill' needs to work.
# It's just a shell script which takes different arguments.
# (Functions which have earned their place in the project
# go into `~/.mill/share/mill/global.functions`)
#
#   mill shim open <file> -- open file os independent
#

set -e

. $_MILL_ROOT/share/mill/global.functions
source $_MILL_ROOT/share/mill/local.config

# LEAVE IT ALL IN 1 FILE FOR NOW
# THE FUNCTIONS COULD BE SEPERATED
# BUT QUESTION IS HOW TO INTEGRATE WITH 'SUB'
# see <https://github.com/37signals/sub/issues/22>

SUBCMD="$1"
SUBARG1="$2"


# # FUNCTIONS

function shim_open(){
    INPUTFILE="$SUBARG1"
    
    case "$PLATFORM" in
    Mac )
        open "$INPUTFILE"
        ;;
    Linux )
        # TODO: should check for gnome-open, kde-open and xdg-open
        # TODO: should open in Terminal/GUI according to terminal type (virtual or not) -- or try GUI and fallback to vim
        xdg-open "$INPUTFILE"
    esac
}

function where_is_pandoc()
{ 
    # find a path to pandoc and `echo` it
    #
    # IF USER HAS SET 'MY_PANDOC' in mill/share/mill/local.config
    if [[ "$MY_PANDOC" != "" ]]; then
        [[ -e ""$PATH"/pandoc" ]] && echo ""$PATH"/pandoc" && return
    fi
    # TEST ALL OTHER POSSIBLE PATHS IN ORDER OF PREFERENCE
    for PATH in "~/.papermill/bin" "~/.cabal/bin" "/usr/local/bin" "/usr/bin" ; do
        [[ -e ""$PATH"/pandoc" ]] && echo ""$PATH"/pandoc" && return
    done
}


# # SUB-COMMAND LOGIC

case "$SUBCMD" in
    open )
	shim_open
	;;
    pandoc )
	where_is_pandoc
	;;
esac
